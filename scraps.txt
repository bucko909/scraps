ANN IDs: for I in */*/Anime/*; do if [ ! -e "$I"/ANN_id ]; then J="$(echo "$I"|cut -d/ -f4)"; echo Series: "$J"; wget -q --user-agent="mozilla" "http://www.google.com/search?q=site:animenewsnetwork.com/encyclopedia/anime+$J" -O -|perl -ne 'while(/<a href="http:\/\/www.animenewsnetwork.com\/encyclopedia\/anime.php\?id=(\d+)"[^>]*>(.*?)<\/a>/g){print"$1 $2\n"}'; read N; if [ -n "$N" ]; then echo "$N" > "$I"/ANN_id; else echo "Skipping"; echo; fi; fi; done
ANN pages: for I in */*/Anime/*; do if [ -e "$I"/ANN_id ]; then J="$(echo "$I"|cut -d/ -f4)"; N="$(cat "$I"/ANN_id)"; echo Series: "$J" "($N)"; if wget -q -O "$I"/ANN_page --user-agent=mozilla http://www.animenewsnetwork.com/encyclopedia/anime.php?id=$N; then echo; else echo FAILLL; echo; fi; fi; done
find ../eMusic ../eMusicTemp -type f -iname '*.mp3'|sort|while read I; do id3v2 --list "$I"|grep '^.... '|sed 's/"/\\"/'|perl -pe '/^(TPE1|TALB|TIT2)/&&s|[/]|_|g'|sed 's/ (.*): \(.*\)/="\1"/'>tmp; . tmp; TN=$(seq -f %02g $TRCK $TRCK); MULTI="$(echo $TPOS|grep -v '/1'|sed 's/\(.*\)\/\(.*\)/ - Disc \1/')"; mkdir -p "$TPE1 - $TALB$MULTI" 2> /dev/null; cp -uav "$I" "$TPE1 - $TALB$MULTI/$TPE1 - $TALB$MULTI - $TN - $TIT2.mp3"; done
find -type f -iname '*.mp3'|sort|perl -ne 'm|\./(.*)/.*?- (\d+)|;if($1 ne $a){print " ERROR" if $n!=$on;print "\n$1:";$a=$1;$n=0}print " $2";$n++;$on=$2;END{print"\n"}'|grep ERROR
ANN licences: for I in */*/Anime/*; do if [ ! -e "$I"/licensed -a -e "$I"/ANN_id ]; then J="$(echo "$I"|cut -d/ -f4)"; N="$(cat "$I"/ANN_id)"; echo Series: "$J" "($N)"; if wget -q -O - --user-agent=mozilla http://www.animenewsnetwork.com/encyclopedia/anime.php?id=$N|perl -ne 'if(/English companies.*?Licensed by.*?<A HREF="company.php\?id=.*?>(.*?)<\/A>/){print"$1\n";$a=1;exit 0}END{exit 1 unless$a}'>~/tmp; then echo Licensed.; mv ~/tmp "$I"/licensed; else echo Unlicensed; fi; sleep 1; echo; fi; done
ANN licenses 2: for I in */*/Anime/*; do if [ -e "$I"/ANN_page -a ! -e "$I"/licensed ]; then J="$(echo "$I"|cut -d/ -f4)"; N="$(cat "$I"/ANN_id)"; echo Series: "$J" "($N)"; if cat "$I"/ANN_page|perl -ne 'if(/English companies.*?Licensed by.*?<A HREF="company.php\?id=.*?>(.*?)<\/A>/){print"$1\n";$a=1;exit 0}END{exit 1 unless$a}'>~/tmp; then echo Licensed.; mv ~/tmp "$I"/licensed; else echo Unlicensed; fi; fi; done
ANN vintage: for I in */*/Anime/*; do if [ -e "$I"/ANN_page -a ! -e "$I"/vintage ]; then J="$(echo "$I"|cut -d/ -f4)"; N="$(cat "$I"/ANN_id)"; echo Series: "$J" "($N)"; if cat "$I"/ANN_page|perl -ne'BEGIN{undef$/}if(/Vintage.*?<(?:SPAN|DIV CLASS="tab")>(\d{4}-\d{2}-\d{2})/s){print"$1\n";$a=1;exit 0}END{exit 1 unless$a}'>~/tmp; then echo -n Vintage:\ ; cat ~/tmp; mv ~/tmp "$I"/vintage; else echo No vintage; fi; fi; done
for I in */*/Anime/*; do if [ -e "$I"/vintage ]; then V="$(cat "$I"/vintage)"; date -d "$V + 1 month" +"%m %Y"|while read M Y; do S=$(expr $M / 3); rm "$I"/season-* 2> /dev/null; touch "$I"/season-$Y-$S; done; fi; done
photo shuffle: ls|perl -e '@a=<>;@b=map{rand()}@a;@a=@a[sort{$b[$a] <=> $b[$b]}(0..$#a)];print map{sprintf("%02g.jpg %s",$_+1,$a[$_])}(0..$#a)'|while read I J; do ln -s $J $I; done
photo resize: for I in ??.jpg; do J=$(echo $I|sed 's/[^0-9]//g'); echo $I $J; convert +profile "*" -resize 800 $J.jpg $J\_small.bmp; convert $J\_small.bmp $J\_small.jpg; convert +profile "*" -resize 320 $J.jpg $J\_thumb.bmp; convert $J\_thumb.bmp $J\_thumb.jpg; done # bmp maybe not required; could have been Opera caching EXIF
photo comp index: F=''; for I in Agaeki Aksan Aen bakaidiot_ Blood_God Brad bucko dangerman Faux Mogmiester monk Spooky_Rach whythehell Yurgen Zed0; do F="$F<option value="$I">$I</option>"; done; (echo '<html><body><form method="post" action="sub.sh">Your name: <input name="n" type="text"/><p/>'; for I in `seq -f%02g 1 15`; do J=$(echo $I|sed 's/[^0-9]//g'); echo $J '<a href="'$J'_small.jpg"><img src="'$J'_thumb.jpg"/></a><select name="s$J">'"$F"'</select><p/>'; done; echo "</form></body></html>") > index.html
photo comp results: for I in $(cat subs.txt.marking|grep -v 2008|cut -d'&' -f1|cut -d= -f2|sort|uniq); do grep n=$I subs.txt|tail -n 1; done|cut -d= -f2-|sed s/'&'/' '/|while read I J; do echo "$I $J"|perl -ne '/(.*?) (.*)/;$n=$1;$_=$2;$a{$_}=++$a for(@a=qw/Zed0 Blood_God Brad Mogmiester Aen Spooky_Rach dangerman Aksan bakaidiot_ Faux Agaeki whythehell Yurgen bucko monk/);for(split/\&/){/s(.*)=(.*)/;$s++if$a{$2}==$1;$r.="$2\->$a[$1-1], "if$a{$2}!=$1}print sprintf("%02i",$s)." <b>".$n."</b>: ".int($s).($r?" ($r)":"")."\n"'; done|perl -ne 'while(/([^( ]*?)->(.*?),/g){print"$2\n"}'|sort|uniq -c
photo comp results: for I in $(cat subs.txt.marking|grep -v 2008|cut -d'&' -f1|cut -d= -f2|sort|uniq); do echo "$I"; grep n=$I subs.txt.marking|tail -n 1; done|cut -d= -f2-|sed s/'&'/' '/|while read I J; do echo "$I $J"|perl -ne '/(.*?) (.*)/;$n=$1;$_=$2;$a{$_}=++$a for(@a=qw/Zed0 Blood_God Brad Mogmiester Aen Spooky_Rach dangerman Aksan bakaidiot_ Faux Agaeki whythehell Yurgen bucko monk/);for(split/\&/){/s(.*)=(.*)/;$s++if$a{$2}==$1;$r.="$2\->$a[$1-1], "if$a{$2}!=$1}print sprintf("%02i",$s)." <b>".$n."</b>: ".int($s).($r?" ($r)":"")."\n"'; done|sort
photo comp desk hardness: for I in $(cat subs.txt.marking|grep -v 2008|cut -d'&' -f1|cut -d= -f2|sort|uniq); do grep n=$I subs.txt|tail -n 1; done|cut -d= -f2-|sed s/'&'/' '/|while read I J; do echo "$I $J"|perl -ne '/(.*?) (.*)/;$n=$1;$_=$2;$a{$_}=++$a for(@a=qw/Zed0 Blood_God Brad Mogmiester Aen Spooky_Rach dangerman Aksan bakaidiot_ Faux Agaeki whythehell Yurgen bucko monk/);for(split/\&/){/s(.*)=(.*)/;$s++if$a{$2}==$1;$r.="$2\->$a[$1-1], "if$a{$2}!=$1}print sprintf("%02i",$s)." <b>".$n."</b>: ".int($s).($r?" ($r)":"")."\n"'; done|sort
anki reset passwords: sqlite3 passwords.anki 'SELECT factId, value FROM fields WHERE fieldModelId = -1247592612793759413 AND ordinal = 0'|sed 's/|/ /'|while read I J; do echo $J; NP="$(pwgen -s -y 10 1|perl -pe 'chomp')"; SHA=$(echo -n "PxO})|>jSA*kmOt_%]UfjP30To=sgnG)d<*7Ul[Y$NP"|base64|sha1sum|cut -d' ' -f1); GPG=$(echo -n "$NP"|gpg -a -e --recipient "David Buckley"|perl -pe 's/\n/<br>/'); sqlite3 passwords.anki "UPDATE fields SET value=\"$GPG\" WHERE factId = $I AND fieldModelId = 219336218566379852 AND ordinal = 2"; sqlite3 passwords.anki "UPDATE fields SET value=\"$SHA\" WHERE factId = $I AND fieldModelId = 5313177876982843724 AND ordinal = 1"; done
anki get passwords: (echo; echo; echo; sqlite3 passwords.anki 'SELECT factId, value FROM fields WHERE fieldModelId = -1247592612793759413 AND ordinal = 0'|sed 's/|/ /'|while read I J; do PW="$(sqlite3 passwords.anki "SELECT value FROM fields WHERE factId = $I AND fieldModelId = 219336218566379852 AND ordinal = 2"|sed 's/<br[^>]*>/\n/g')"; echo -n "     $J: "; echo "$PW">tmp.asc|gpg -a --passphrase-fd 3 -o - tmp.asc 3<tmp/pass.pass; echo; done)
retag various artists/MOS crappediness: for I in *; do J="$(id3v2 -l "$I"|grep TIT2|cut -d' ' -f4-)"; art="$(echo "$J"|sed 's/ \/ .*//')"; tit="$(echo "$J"|sed 's/.* \/ //')"; id3v2 -a "$art" -t "$tit" "$I"; metaflac --remove-tag=ARTIST --set-tag=ARTIST="$art" --remove-tag=TITLE --set-tag=TITLE="$tit" ../../flac/Ministry\ of\ Sound\ -\ Dance\ Nation\ -\ Disc\ 1/"${I%mp3}flac"; vorbiscomment -w ../../ogg/Ministry\ of\ Sound\ -\ Dance\ Nation\ -\ Disc\ 1/"${I%mp3}ogg" -t "ARTIST=$art" -t "ALBUM=Dance Nation - Disc 1" -t "TITLE=$tit" -t DATE=2006 -t GENRE=Rock -t TRACKNUMBER="$(echo $I|sed 's/.*- \([0-9][0-9]\) -.*/\1/')" -t CDDB=4912b615; done
UTF-8 fix: find -type f|while read I; do J="$(echo "$I"|iconv --from=UTF-8 --to=ISO8859-1 2>/dev/null)"; if [ "$?" = "0" -a "$I" != "$J" ]; then DI="$(du -s "$I"|cut -f1)"; DJ="$(du -s "$J"|cut -f1)"; if [ "$DJ" -ge "$DI" ]; then echo "$J bigger [$DJ/$DI]"; DD=../junked/"$(dirname "$J")"; echo mkdir -p "$DD"; echo mv "$I" "$DD"; else echo "$J broken bigger [$DI/$DJ]"; DD=../backed/"$(dirname "$J")"; echo mkdir -p "$DD"; echo mv "$J" "$DD"; echo mv "$I" "$J"; fi; fi; done
make anime dirs: D=/disks/mediac/public/Anime; while read I; do mkdir $D/"$I"; for T in public all; do sudo -u media mkdir /union/$T/Anime/"$I"; sudo -u media ln -s $D/"$I"/stub /union/$T/Anime/"$I"/stub; done; done
rename: wget -q http://localhost/~bucko/names.pl -O -|perl -ne 'while(/"(\?mode=rename.*?)"/g){print"http://localhost/~bucko/names.pl$1\n"}'|while read I; do wget -q "$I" -O -|grep '<p>'|sed 's/<[^>]*>//g'; done
Dodgy fansub groups: for I in *; do echo "$I":; last="$(ls "$I"|grep -o -- '- [0-9][0-9]*'|cut -d' ' -f2|sort|tail -n1)"; ls "$I"|grep -o '\[[^]]*\]'|tr -d '[]'|sort|uniq|while read group; do lastg="$(ls "$I"/*"$group"*|grep -o -- '- [0-9][0-9]*'|cut -d' ' -f2|sort|tail -n1)"; if [ -z "$lastg" ]; then echo -n; elif [ "$lastg" -lt "$last" ]; then echo "Short $group"; else echo "OK    $group"; fi; done; echo; done|less (Done up to end of H)
rename: wget -q -O - http://localhost/~bucko/names.pl|perl -ne 'while(/href="(\?mode=rename.*?)"/g){print"http://localhost/~bucko/names.pl$1\n"}'|while read I; do wget -O - -q "$I" | perl -pe 's/<.*?>//g'; done
missing: for I in *; do for J in "$I"/*; do echo "$J"; done > /tmp/files; cat /tmp/files | grep '/.* - [0-9]'|sed 's/.*\/.* - \([0-9][0-9]*\).*/\1/'|sort|uniq > /tmp/eps; L=$(tail -n1 /tmp/eps); if [ -n "$L" ]; then for N in $(seq -f%02g 1 $L); do grep -q ^$N$ /tmp/eps || echo "$I - $N"; done; fi; done
bcmine restarter: while true; do if ! (screen -x bcmine -p 0 -X hardcopy /tmp/bcmine; cat /tmp/bcmine|grep -v '^$'|tail -n2|perl -MTime::Local -e 'use POSIX qw/strftime/; $_=<>; m(^\[(\d+)/(\d+)/(\d+) (\d+):(\d+):(\d+)\] (.*)) || do { print "canot parse $_"; exit 0}; $t = time() - timelocal($6,$5,$4,$1,$2-1,$3); exit 0 if $t < 30; $_ = $7; chomp $m; exit 0 unless /^Warning: work queue empty/ or /^Disconnected from/ or /^Failed to reconnect/; $_ = <>; exit 1 unless /Mhash/; exit 0'); then echo "Killing because:"; cat /tmp/bcmine; sudo -u hashkill killall phoenix.py; fi; sleep 30; done
britcoin trades: curl -s https://britcoin.co.uk/api/getTrades.php | perl -ne 's/[ "]//g;while(/\{(.*?)}/g){@b=split/,/,$1;%s=();for(@b){($a,$b)=split/:/;$s{$a}=$b};use POSIX qw/strftime/;printf "%s\t%0.2f\t%0.2f\n", $s{date}, $s{amount}, $s{price};}' > trades.dat
irssie logs to ISO time: rm merged/*; for I in *.log; do echo "$I"; perl -e 'open(A,$ARGV[0]);$ARGV[0]=~/([^.]*).([^.]*).log/ or die;$o="merged/$1.$2.log";open O, ">>$o";$df="%Y-%m-%dT";while(<A>){if (/^\0*--- (?:Log opened|Day changed) (.*?)(?:--- Log opene)?/) {$d = `date +$df -d "$1"`; chomp $d } elsif ( /^--- Log closed/) {} elsif (/^(..:..)(:..)? (.*)/) { ($t, $s, $l) = ($1, $2, $3); $s||=":00"; print O "$d$t$s $l\n" } else { s/[^ -z]/?/g; print "ERROR: $_\n" } }' "$I"; done 2>&1
Fans: aticonfig --pplib-cmd 'set fanspeed 0 40'; sudo /etc/init.d/fancontrol restart
</var/log/whoisonline perl -e 'use POSIX qw/strftime/; open MACS, "macs"; for(<MACS>) { chomp; ($a,$b) = split / /; $macs{$a} = $b } close MACS; sub mac { if ( $_[0] =~ /^08:00/ ) { return "virtualcocks" } $macs{$_[0]} || $_[0] } sub output { for(keys%l){if(!$o{$_}){print"+\t".strftime("%Y-%m-%dT%H:%M:%S", localtime $t)."\t".mac($_)."\n";$o{$_}=1}} for(keys%o){if(!$l{$_}){print"-\t".strftime("%Y-%m-%dT%H:%M:%S", localtime $t)."\t".mac($_)."\n";delete $o{$_} } } } while(<>){if(/^(\d+):$/) {output(); $t = $1; %l = ()}elsif(/^\S+\s+ether\s+(\S+)/) {$l{$1}=1}}'
ANN IDs: for I in */*/Anime/*; do if [ ! -e "$I"/ANN_id ]; then J="$(echo "$I"|cut -d/ -f4)"; echo Series: "$J"; wget -q --user-agent="mozilla" "http://www.google.com/search?q=site:animenewsnetwork.com/encyclopedia/anime+$J" -O -|perl -ne 'while(/<a href="[^"]*http:\/\/www.animenewsnetwork.com\/encyclopedia\/anime.php%3Fid%3D(\d+)[^"]*"[^>]*>(.*?)<\/a>/g){print"$1 $2\n" unless $2 eq "Cached"}'; read N; if [ -n "$N" ]; then echo "$N" > "$I"/ANN_id; else echo "Skipping"; echo; fi; fi; done
jstest log: jstest /dev/input/js1 | perl -e 'use Time::HiRes qw/time/; %s=("on "=>92,"off"=>91);while(1){$a=getc;if($a eq "\r") {$_=""; next} $_ .= $a; if (/31:.* /) {s/.*Buttons://;s/\r$/\n/;%o=();s/( \d|\d\d):(on |off)/$o{$1}=$2 eq "on ";"\x1b[$s{$2};1m$1"/eg; printf "%15.3f %s\n", time(), $_; printf STDERR "%15.3f %s\n", time(), join(" ", grep { $o{$_} } keys %o);}}' 2> /tmp/jslog2-$(date +%Y-%m-%dT%H:%M:%S)
